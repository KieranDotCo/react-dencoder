{"version":3,"sources":["components/PrettyPrintJSON/PrintPrintJSON.js","components/UrlEncoder/UrlEncoder.js","components/UrlDecoder/UrlDecoder.js","App.js","serviceWorker.js","index.js"],"names":["PrintPrintJSON","props","jsonValue","jsonError","JSON","stringify","parse","value","e","className","role","UrlEncoder","encodeValue","encodeError","encodeURIComponent","UrlDecoder","decodeValue","decodeError","decodeURIComponent","App","state","activeTab","encodedValue","decodedValue","handleChange","bind","tab","this","setState","target","event","textArea","document","createElement","style","position","top","left","width","height","padding","border","outline","boxShadow","background","querySelector","textContent","body","appendChild","select","msg","execCommand","console","log","err","removeChild","placeholder","onChange","id","aria-controls","onClick","setActiveTab","aria-labelledby","onCopy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3ed5002.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function PrintPrintJSON(props) {\n  let jsonValue;\n  const jsonError = \"Please enter valid JSON to be pretty printed.\";\n\n  try {\n    jsonValue = JSON.stringify(JSON.parse(props.value), null, 2);\n  } catch (e) {\n    jsonValue = jsonError;\n  }\n\n  return (\n    <div>\n      <div\n        className={\"alert alert-warning\" + (jsonValue ? \" d-none\" : \"\")}\n        role=\"alert\"\n      >\n        Please enter a value to pretty print as JSON.\n      </div>\n      {jsonValue === jsonError ? (\n        <div className={\"alert alert-danger\"} role=\"alert\">\n          {jsonError}\n        </div>\n      ) : (\n        <pre className=\"json-value\">{jsonValue}</pre>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function UrlEncoder(props) {\n  let encodeValue;\n  const encodeError = \"Please enter valid text to be encoded.\";\n\n  try {\n    encodeValue = encodeURIComponent(props.value);\n  } catch (e) {\n    encodeValue = encodeError;\n  }\n\n  return (\n    <div>\n      <div\n        className={\"alert alert-warning\" + (encodeValue ? \" d-none\" : \"\")}\n        role=\"alert\"\n      >\n        Please enter a value to be URL Encoded.\n      </div>\n      {encodeValue === encodeError ? (\n        <div className={\"alert alert-danger\"} role=\"alert\">\n          {encodeError}\n        </div>\n      ) : (\n        <pre className=\"encode-value\">{encodeValue}</pre>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function UrlDecoder(props) {\n  let decodeValue;\n  const decodeError = \"Please enter valid text to be decoded.\";\n\n  try {\n    decodeValue = decodeURIComponent(props.value);\n  } catch (e) {\n    decodeValue = decodeError;\n  }\n\n  return (\n    <div>\n      <div\n        className={\"alert alert-warning\" + (decodeValue ? \" d-none\" : \"\")}\n        role=\"alert\"\n      >\n        Please enter a value to be URL Decoded.\n      </div>\n      {decodeValue === decodeError ? (\n        <div className={\"alert alert-danger\"} role=\"alert\">\n          {decodeError}\n        </div>\n      ) : (\n        <pre className=\"decode-value\">{decodeValue}</pre>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport PrettyPrintJSON from './components/PrettyPrintJSON/PrintPrintJSON';\nimport UrlEncoder from './components/UrlEncoder/UrlEncoder';\nimport UrlDecoder from './components/UrlDecoder/UrlDecoder';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: 'decode',\n      value: '',\n      encodedValue: '',\n      decodedValue: '',\n      jsonValue: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  setActiveTab(tab) {\n    this.setState({ activeTab: tab });\n    this.handleChange({target: {value: this.state.value}});\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  onCopy() {\n    // We need to create a dummy textarea with the text to be copied in the DOM\n    var textArea = document.createElement(\"textarea\");\n\n    // Hide the textarea from actually showing\n    textArea.style.position = 'fixed';\n    textArea.style.top = '-999px';\n    textArea.style.left = '-999px';\n    textArea.style.width = '2em';\n    textArea.style.height = '2em';\n    textArea.style.padding = '0';\n    textArea.style.border = 'none';\n    textArea.style.outline = 'none';\n    textArea.style.boxShadow = 'none';\n    textArea.style.background = 'transparent';\n\n    // Set the texarea's content to our value defined in our [text-copy] attribute\n    textArea.value = document.querySelector(`.${this.state.activeTab}-value`).textContent;\n    document.body.appendChild(textArea);\n\n    // This will select the textarea\n    textArea.select();\n\n    try {\n      // Most modern browsers support execCommand('copy'|'cut'|'paste'), if it doesn't it should throw an error\n      var successful = document.execCommand('copy');\n      var msg = successful ? 'successful' : 'unsuccessful';\n      // Let the user know the text has been copied, e.g toast, alert etc.\n      console.log(msg);\n    } catch (err) {\n      // Tell the user copying is not supported and give alternative, e.g alert window with the text to copy\n      console.log('unable to copy');\n    }\n\n    // Finally we remove the textarea from the DOM\n    document.body.removeChild(textArea);\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <textarea className=\"dencoder-textarea\" placeholder=\"Enter the value to be encoded/decoded\" value={this.state.value} onChange={this.handleChange}></textarea>\n          </div>\n          <div className=\"col-md-6\">\n            <nav>\n              <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n                <button className={'nav-item nav-link ' + (this.state.activeTab === 'decode' ? 'active' : '')} id=\"nav-decoded-tab\" role=\"tab\" aria-controls=\"nav-decoded\" onClick={() => this.setActiveTab('decode')}>Decoded</button>\n                <button className={'nav-item nav-link ' + (this.state.activeTab === 'encode' ? 'active' : '')} id=\"nav-encoded-tab\" role=\"tab\" aria-controls=\"nav-encoded\" onClick={() => this.setActiveTab('encode')}>Encoded</button>\n                <button className={'nav-item nav-link ' + (this.state.activeTab === 'json' ? 'active' : '')} id=\"nav-json-tab\" role=\"tab\" aria-controls=\"nav-json\" onClick={() => this.setActiveTab('json')}>JSON</button>\n              </div>\n            </nav>\n            <div className=\"tab-content\" id=\"nav-tabContent\">\n              <div className={'tab-pane fade ' + (this.state.activeTab === 'decode' ? 'active show' : '')} id=\"nav-decoded\" role=\"tabpanel\" aria-labelledby=\"nav-decoded-tab\">\n                <br />\n                <UrlDecoder value={this.state.value}/>\n                <button className=\"btn btn-light\" onClick={() => this.onCopy()}>Copy Decoded</button>\n              </div>\n              <div className={'tab-pane fade ' + (this.state.activeTab === 'encode' ? 'active show' : '')} id=\"nav-encoded\" role=\"tabpanel\" aria-labelledby=\"nav-encoded-tab\">\n                <br />\n                <UrlEncoder value={this.state.value}/>\n                <button className=\"btn btn-light\" onClick={() => this.onCopy()}>Copy Encoded</button>\n              </div>\n              <div className={'tab-pane fade ' + (this.state.activeTab === 'json' ? 'active show' : '')} id=\"nav-encoded\" role=\"tabpanel\" aria-labelledby=\"nav-encoded-tab\">\n                <br />\n                <PrettyPrintJSON value={this.state.value}/>\n                <button className=\"btn btn-light\" onClick={() => this.onCopy()}>Copy JSON</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}