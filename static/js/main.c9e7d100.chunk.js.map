{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","activeTab","value","encodedValue","decodedValue","jsonValue","jsonError","handleChange","bind","tab","this","setState","target","event","JSON","stringify","parse","e","decodeURIComponent","encodeURIComponent","textArea","document","createElement","style","position","top","left","width","height","padding","border","outline","boxShadow","background","body","appendChild","select","msg","execCommand","console","log","err","removeChild","className","placeholder","onChange","id","role","aria-controls","onClick","setActiveTab","aria-labelledby","onCopy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9e7d100.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: 'decode',\n      value: '',\n      encodedValue: '',\n      decodedValue: '',\n      jsonValue: ''\n    };\n    this.jsonError = 'Please enter valid JSON to be pretty printed.';\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  setActiveTab(tab) {\n    this.setState({ activeTab: tab });\n    this.handleChange({target: {value: this.state.value}});\n  }\n\n  handleChange(event) {\n    let jsonValue = '';\n    try {\n      jsonValue = JSON.stringify(JSON.parse(event.target.value),null,2);\n    } catch (e) {\n      jsonValue = this.jsonError;\n    }\n\n    this.setState({\n      value: event.target.value,\n      decodedValue: decodeURIComponent(event.target.value),\n      encodedValue: encodeURIComponent(event.target.value),\n      jsonValue: jsonValue\n    });\n  }\n\n  onCopy() {\n    // We need to create a dummy textarea with the text to be copied in the DOM\n    var textArea = document.createElement(\"textarea\");\n\n    // Hide the textarea from actually showing\n    textArea.style.position = 'fixed';\n    textArea.style.top = '-999px';\n    textArea.style.left = '-999px';\n    textArea.style.width = '2em';\n    textArea.style.height = '2em';\n    textArea.style.padding = '0';\n    textArea.style.border = 'none';\n    textArea.style.outline = 'none';\n    textArea.style.boxShadow = 'none';\n    textArea.style.background = 'transparent';\n\n    // Set the texarea's content to our value defined in our [text-copy] attribute\n    textArea.value = this.state.activeTab === 'decode' ? this.state.decodedValue : this.state.encodedValue;\n    document.body.appendChild(textArea);\n\n    // This will select the textarea\n    textArea.select();\n\n    try {\n      // Most modern browsers support execCommand('copy'|'cut'|'paste'), if it doesn't it should throw an error\n      var successful = document.execCommand('copy');\n      var msg = successful ? 'successful' : 'unsuccessful';\n      // Let the user know the text has been copied, e.g toast, alert etc.\n      console.log(msg);\n    } catch (err) {\n      // Tell the user copying is not supported and give alternative, e.g alert window with the text to copy\n      console.log('unable to copy');\n    }\n\n    // Finally we remove the textarea from the DOM\n    document.body.removeChild(textArea);\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <textarea className=\"dencoder-textarea\" placeholder=\"Enter the value to be encoded/decoded\" value={this.state.value} onChange={this.handleChange}></textarea>\n          </div>\n          <div className=\"col-md-6\">\n            <nav>\n              <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n                <button className={'nav-item nav-link ' + (this.state.activeTab === 'decode' ? 'active' : '')} id=\"nav-decoded-tab\" role=\"tab\" aria-controls=\"nav-decoded\" onClick={() => this.setActiveTab('decode')}>Decoded</button>\n                <button className={'nav-item nav-link ' + (this.state.activeTab === 'encode' ? 'active' : '')} id=\"nav-encoded-tab\" role=\"tab\" aria-controls=\"nav-encoded\" onClick={() => this.setActiveTab('encode')}>Encoded</button>\n                <button className={'nav-item nav-link ' + (this.state.activeTab === 'json' ? 'active' : '')} id=\"nav-json-tab\" role=\"tab\" aria-controls=\"nav-json\" onClick={() => this.setActiveTab('json')}>JSON</button>\n              </div>\n            </nav>\n            <div className=\"tab-content\" id=\"nav-tabContent\">\n              <div className={'tab-pane fade ' + (this.state.activeTab === 'decode' ? 'active show' : '')} id=\"nav-decoded\" role=\"tabpanel\" aria-labelledby=\"nav-decoded-tab\">\n                <br />\n                <div className={'alert alert-warning' + (this.state.decodedValue ? ' d-none' : '')} role=\"alert\">\n                  Please enter a value to be decoded.\n                </div>\n                <pre className=\"decoded-value\">\n                  {this.state.decodedValue}\n                </pre>\n                <button className=\"btn btn-light\" onClick={() => this.onCopy()}>Copy Decoded</button>\n              </div>\n              <div className={'tab-pane fade ' + (this.state.activeTab === 'encode' ? 'active show' : '')} id=\"nav-encoded\" role=\"tabpanel\" aria-labelledby=\"nav-encoded-tab\">\n                <br />\n                <div className={'alert alert-warning' + (this.state.encodedValue ? ' d-none' : '')} role=\"alert\">\n                  Please enter a value to be encoded.\n                  </div>\n                <pre className=\"encoded-value\">\n                  {this.state.encodedValue}\n                </pre>\n                <button className=\"btn btn-light\" onClick={() => this.onCopy()}>Copy Encoded</button>\n              </div>\n              <div className={'tab-pane fade ' + (this.state.activeTab === 'json' ? 'active show' : '')} id=\"nav-encoded\" role=\"tabpanel\" aria-labelledby=\"nav-encoded-tab\">\n                <br />\n                <div className={'alert alert-warning' + (this.state.jsonValue ? ' d-none' : '')} role=\"alert\">\n                  Please enter a value to pretty print as JSON.\n                </div>\n                {\n                this.state.jsonValue === this.jsonError ?\n                <div className={'alert alert-danger'} role=\"alert\">\n                  {this.jsonError}\n                </div>:\n                <pre className=\"json-value\">\n                  {this.state.jsonValue}\n                </pre>\n                }\n                <button className=\"btn btn-light\" onClick={() => this.onCopy()}>Copy JSON</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}